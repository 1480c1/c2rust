diff --git a/README.markdown b/README.markdown
index 8ad74a6..0a7c870 100644
--- a/README.markdown
+++ b/README.markdown
@@ -5,6 +5,15 @@
 Markdown parser used by GitHub, with Python integration added.
 
 
+
+Translator
+-------
+run `python setup.py build --translator` to run translator and translate to rust
+run `python setup.py build --rust-crosschecks` to translate then run rust xchecks
+run `python setup.py build --clang-crosschecks` to run clang xchecks
+
+finish with `python setup.py test`
+
 Install
 -------
 
diff --git a/process.sh b/process.sh
new file mode 100755
index 0000000..b232646
--- /dev/null
+++ b/process.sh
@@ -0,0 +1,92 @@
+#!/bin/bash
+
+MACHINE_NAME=`uname -n`
+C2RUST=../../C2Rust
+AST_EXTRACTOR=$C2RUST/dependencies/llvm-6.0.0/build.$MACHINE_NAME/bin/ast-extractor
+AST_IMPORTER=$C2RUST/ast-importer/target/debug/ast_importer
+LIB_PATH=$HOME/.rustup/toolchains/nightly-2018-01-06-x86_64-unknown-linux-gnu/lib/
+RUSTFMT=rustfmt
+
+XCHECK_TOPDIR=$C2RUST/cross-checks/rust-checks
+XCHECK_PLUGIN=$XCHECK_TOPDIR/rustc-plugin/target/debug/libcross_check_plugin.so
+XCHECK_DERIVE=$XCHECK_TOPDIR/derive-macros/target/debug/libcross_check_derive.so
+XCHECK_RUNTIME=$XCHECK_TOPDIR/runtime/target/debug/libcross_check_runtime.rlib
+
+`cd src && gperf html_entities.gperf --output-file=html_entities.h`
+
+OUTPUT_DIR=translator-build
+
+translate() {
+  $AST_EXTRACTOR src/$1.c
+  env RUST_BACKTRACE=1 LD_LIBRARY_PATH=$LIB_PATH $AST_IMPORTER --reloop-cfgs src/$1.c.cbor > $OUTPUT_DIR/$1.rs
+  #$RUSTFMT $OUTPUT_DIR/$1.rs --force
+  rustc --crate-type=rlib --crate-name=$1 $OUTPUT_DIR/$1.rs -o $OUTPUT_DIR/lib$1.rlib
+}
+
+translate_xcheck() {
+  $AST_EXTRACTOR src/$1.c
+  env RUST_BACKTRACE=1 LD_LIBRARY_PATH=$LIB_PATH \
+      $AST_IMPORTER --reloop-cfgs --cross-checks \
+      --cross-check-config snudown_rust.c2r \
+      -- src/$1.c.cbor > $OUTPUT_DIR/$1.rs
+  #$RUSTFMT $OUTPUT_DIR/$1.rs --force
+  rustc -g --crate-type=rlib --crate-name=$1 \
+      --extern cross_check_plugin=$XCHECK_PLUGIN \
+      --extern cross_check_derive=$XCHECK_DERIVE \
+      --extern cross_check_runtime=$XCHECK_RUNTIME \
+      $OUTPUT_DIR/$1.rs -o $OUTPUT_DIR/lib$1.rlib \
+      #--Z unstable-options --pretty=expanded \
+}
+
+compile_commands_entry() {
+
+        cat >> compile_commands.json <<END
+{
+  "directory": "${PWD}",
+  "command": "cc -o ${OUTPUT_DIR}/${1}.c.o -c ${PWD}/src/${1}.c -Wwrite-strings -D_FORTIFY_SOURCE=0 -DNDEBUG=1",
+  "file": "${PWD}/src/${1}.c"
+},
+END
+
+}
+
+
+if [ "${1}" == "translate" ]; then
+  echo "[" > compile_commands.json
+  compile_commands_entry "autolink"
+  compile_commands_entry "buffer"
+  compile_commands_entry "stack"
+  compile_commands_entry "markdown"
+  echo "]" >> compile_commands.json
+
+  mkdir $OUTPUT_DIR
+ 
+  translate "autolink"
+  translate "buffer"
+  translate "stack"
+  translate "markdown"
+ 
+  rustc --crate-name=snudownrust --crate-type=staticlib -L $OUTPUT_DIR snudownrust.rs -o $OUTPUT_DIR/libsnudownrust.a
+
+elif [ "$1" == "rustcheck" ]; then
+
+  echo "[" > compile_commands.json
+  compile_commands_entry "autolink"
+  compile_commands_entry "buffer"
+  compile_commands_entry "stack"
+  compile_commands_entry "markdown"
+  echo "]" >> compile_commands.json
+
+  mkdir $OUTPUT_DIR
+
+  translate_xcheck "autolink"
+  translate_xcheck "buffer"
+  translate_xcheck "stack"
+  translate_xcheck "markdown"
+
+  rustc --crate-name=snudownrust --crate-type=staticlib -L $OUTPUT_DIR \
+      --extern cross_check_derive=$XCHECK_DERIVE \
+      --extern cross_check_runtime=$XCHECK_RUNTIME \
+      snudownrustxcheck.rs -o $OUTPUT_DIR/libsnudownrustxcheck.a
+
+fi
\ No newline at end of file
diff --git a/setup.py b/setup.py
index a780cb0..d8bc505 100644
--- a/setup.py
+++ b/setup.py
@@ -1,11 +1,28 @@
 from distutils.spawn import find_executable
+from distutils.cmd import Command
 from setuptools import setup, Extension
-from setuptools.command.build_ext import build_ext
 
 import re
 import os
 import subprocess
 import fnmatch
+import distutils.command.build
+
+# Change these to the correct paths
+plugin_path     = "../../C2Rust/cross-checks/c-checks/clang-plugin/build/plugin/CrossChecks.so"
+runtime_path    = "../../C2Rust/cross-checks/c-checks/clang-plugin/build/runtime/libruntime.a"
+fakechecks_path = "../../C2Rust/cross-checks/libfakechecks"
+clevrbuf_path   = "../../C2Rust/cross-checks/ReMon/libclevrbuf"
+
+os.environ["CC"] = "../../C2Rust/dependencies/llvm-6.0.0/build.donna/bin/clang"
+plugin_args = ['-Xclang', '-load',
+               '-Xclang', plugin_path,
+               '-Xclang', '-add-plugin',
+               '-Xclang', 'crosschecks',
+               '-Xclang', '-plugin-arg-crosschecks',
+               '-Xclang', '-Csnudown.c2r',
+               '-ffunction-sections', # Used by --icf
+               ]
 
 def c_files_in(directory):
     paths = []
@@ -15,10 +32,41 @@ def c_files_in(directory):
     return paths
 
 
-def process_gperf_file(gperf_file, output_file):
-    if not find_executable("gperf"):
-        raise Exception("Couldn't find `gperf`, is it installed?")
-    subprocess.check_call(["gperf", gperf_file, "--output-file=%s" % output_file])
+'''
+extensions[0] -> extension for translating to rust
+extensions[1] -> extension for translating and running rust xcheck
+extensions[2] -> extension for running clang xcheck
+'''
+extensions = [
+    Extension(
+        name='snudown',
+        sources=['snudown.c', 'src/bufprintf.c'] + c_files_in('html/'),
+        include_dirs=['src', 'html'],
+        libraries=['snudownrust'],
+        library_dirs=['translator-build']
+    ),
+    Extension(
+        name='snudown',
+        sources=['snudown.c', 'src/bufprintf.c'] + c_files_in('html/'),
+        include_dirs=['src', 'html'],
+        libraries=['snudownrustxcheck', 'fakechecks'],
+        #libraries=['snudownrustxcheck', 'clevrbuf'],
+        library_dirs=['translator-build', fakechecks_path, clevrbuf_path],
+        extra_link_args=['-Wl,-rpath,{},-rpath,{}'.format(fakechecks_path, clevrbuf_path)],
+    ),
+    Extension(
+        name='snudown',
+        sources=['snudown.c', 'xchecks.c'] + c_files_in('src/') + c_files_in('html/'),
+        include_dirs=['src', 'html'],
+        library_dirs=[fakechecks_path, clevrbuf_path],
+        #libraries=["fakechecks"],
+        libraries=["clevrbuf"],
+        extra_compile_args=plugin_args,
+        extra_link_args=['-fuse-ld=gold', '-Wl,--gc-sections,--icf=safe',
+                            '-Wl,-rpath,{},-rpath,{}'.format(fakechecks_path, clevrbuf_path)],
+        extra_objects=[runtime_path],
+    )
+]
 
 version = None
 version_re = re.compile(r'^#define\s+SNUDOWN_VERSION\s+"([^"]+)"$')
@@ -29,11 +77,36 @@ with open('snudown.c', 'r') as f:
             version = m.group(1)
 assert version
 
+class BuildSnudown(distutils.command.build.build):
+    user_options = distutils.command.build.build.user_options + [
+    ('translate', None,
+    'translate from c to rust'),
+    ('rust-crosschecks', None,
+    'translate then run rust crosschecks'),
+    ('clang-crosschecks', None,
+    'translate then run rust crosschecks'),
+    ]
+
+    def initialize_options(self, *args, **kwargs):
+        self.translate = self.rust_crosschecks = self.clang_crosschecks = None
+        distutils.command.build.build.initialize_options(self, *args, **kwargs)
+    
+    def run(self, *args, **kwargs):
+        if self.translate is not None:
+            subprocess.check_call(["./process.sh", "translate"])
+            del extensions[1]
+            del extensions[1]
+        if self.rust_crosschecks is not None:
+            subprocess.check_call(["./process.sh", "rustcheck"])
+            del extensions[0]
+            del extensions[1]
+        if self.clang_crosschecks is not None:
+            subprocess.check_call(["./process.sh"])
+            del extensions[0]
+            del extensions[0]
+        distutils.command.build.build.run(self, *args, **kwargs)
+
 
-class GPerfingBuildExt(build_ext):
-    def run(self):
-        process_gperf_file("src/html_entities.gperf", "src/html_entities.h")
-        build_ext.run(self)
 
 setup(
     name='snudown',
@@ -42,12 +115,6 @@ setup(
     author_email='vicent@github.com',
     license='MIT',
     test_suite="test_snudown.test_snudown",
-    cmdclass={'build_ext': GPerfingBuildExt,},
-    ext_modules=[
-        Extension(
-            name='snudown',
-            sources=['snudown.c'] + c_files_in('src/') + c_files_in('html/'),
-            include_dirs=['src', 'html']
-        )
-    ],
+    cmdclass={'build': BuildSnudown},
+    ext_modules=extensions,
 )
diff --git a/snudown_c.c2r b/snudown_c.c2r
new file mode 100644
index 0000000..0dd54cd
--- /dev/null
+++ b/snudown_c.c2r
@@ -0,0 +1,130 @@
+---
+# System headers
+/usr/include/python2.7/object.h:
+    - item: struct
+      name: PyMemberDef
+      custom_hash: "xcheck_hash_PyMemberDef"
+
+# Our own custom cross-checks
+xchecks.c:
+    - item: defaults
+      disable_xchecks: true
+
+# snudown files
+snudown.c:
+    - item: defaults
+      disable_xchecks: true
+      #all_args: default
+
+# html/*.c
+html/html.c:
+    - item: defaults
+      disable_xchecks: true
+
+html/houdini_href_e.c:
+    - item: defaults
+      disable_xchecks: true
+
+html/houdini_html_e.c:
+    - item: defaults
+      disable_xchecks: true
+
+html/html_smartypants.c:
+    - item: defaults
+      disable_xchecks: true
+
+# Translated snudown files
+src/autolink.c:
+    - item: defaults
+      all_args: default
+
+    - item: function
+      name: sd_autolink__www
+      args:
+        rewind_p: disabled
+        no_slash: disabled
+
+    - item: function
+      name: sd_autolink__email
+      args:
+        rewind_p: disabled
+        no_slash: disabled
+
+    - item: function
+      name: sd_autolink__url
+      args:
+        rewind_p: disabled
+        no_slash: disabled
+
+    - item: function
+      name: sd_autolink__subreddit
+      args:
+        rewind_p: disabled
+        no_slash: disabled
+
+    - item: function
+      name: sd_autolink__username
+      args:
+        rewind_p: disabled
+        no_slash: disabled
+
+src/buffer.c:
+    - item: defaults
+      all_args: default
+
+    - item: function
+      name: bufprintf
+      disable_xchecks: true
+
+src/buffer.h:
+    - item: struct
+      name: buf
+      #custom_hash: "xcheck_hash_struct_buf"
+      fields:
+        data: disabled # FIXME: hash up to buf.size bytes
+
+src/html_entities.gperf:
+    - item: defaults
+      all_args: default
+
+src/markdown.c:
+    - item: defaults
+      all_args: default
+
+    - item: struct
+      name: sd_markdown
+      fields:
+        # sd_markdown_new doesn't initialize refs
+        refs: disabled
+        # Fields which the Rust version doesn't hash
+        # FIXME: hash these fields
+        cb: disabled
+        active_char: disabled
+        work_bufs: disabled
+
+    - item: function
+      name: tag_length
+      args:
+        autolink: disabled
+
+    - item: function
+      name: is_ref
+      args:
+        last: disabled # TODO: cross-check this on exit
+
+    - item: function
+      name: parse_table_header
+      args:
+        columns: disabled
+        column_data: disabled
+
+src/stack.c:
+    - item: defaults
+      all_args: default
+
+    - item: function
+      name: stack_init
+      args:
+        # Segfault on xcheck(st), for some reason
+        st: disabled
+...
diff --git a/snudown_rust.c2r b/snudown_rust.c2r
new file mode 100644
index 0000000..da3a123
--- /dev/null
+++ b/snudown_rust.c2r
@@ -0,0 +1,114 @@
+---
+translator-build/autolink.rs:
+    - item: defaults
+      all_args: default
+
+    - item: struct
+      name: buf
+      disable_xchecks: false
+      fields:
+        data: disabled # FIXME: hash up to buf.size bytes
+
+    - item: function
+      name: sd_autolink__www
+      args:
+        rewind_p: disabled
+        no_slash: disabled
+
+    - item: function
+      name: sd_autolink__email
+      args:
+        rewind_p: disabled
+        no_slash: disabled
+
+    - item: function
+      name: sd_autolink__url
+      args:
+        rewind_p: disabled
+        no_slash: disabled
+
+    - item: function
+      name: sd_autolink__subreddit
+      args:
+        rewind_p: disabled
+        no_slash: disabled
+
+    - item: function
+      name: sd_autolink__username
+      args:
+        rewind_p: disabled
+        no_slash: disabled
+
+translator-build/buffer.rs:
+    - item: defaults
+      all_args: default
+
+    - item: struct
+      name: buf
+      disable_xchecks: false
+      fields:
+        data: disabled # FIXME: hash up to buf.size bytes
+
+translator-build/markdown.rs:
+    - item: defaults
+      all_args: default
+
+    - item: struct
+      name: sd_markdown
+      disable_xchecks: false
+      fields:
+        # FIXME: hash these fields
+        cb: disabled
+        refs: disabled
+        active_char: disabled
+        work_bufs: disabled
+
+    - item: struct
+      name: buf
+      disable_xchecks: false
+      fields:
+        data: disabled # FIXME: hash up to buf.size bytes
+
+    - item: struct
+      name: link_ref
+      disable_xchecks: false
+
+    - item: struct
+      name: sd_callbacks
+      disable_xchecks: false
+
+    - item: struct
+      name: mkd_autolink
+      disable_xchecks: false
+
+    - item: function
+      name: tag_length
+      args:
+        autolink: disabled
+
+    - item: function
+      name: is_ref
+      args:
+        last: disabled # TODO: cross-check this on exit
+
+    - item: function
+      name: parse_table_header
+      args:
+        columns: disabled
+        column_data: disabled
+
+translator-build/stack.rs:
+    - item: defaults
+      all_args: default
+
+    - item: struct
+      name: stack
+      disable_xchecks: false
+
+    - item: function
+      name: stack_init
+      args:
+        # Segfault on xcheck(st), for some reason
+        st: disabled
+
+...
diff --git a/snudownrust.rs b/snudownrust.rs
new file mode 100644
index 0000000..2c456a5
--- /dev/null
+++ b/snudownrust.rs
@@ -0,0 +1,4 @@
+extern crate autolink;
+extern crate buffer;
+extern crate markdown;
+extern crate stack;
diff --git a/snudownrustxcheck.rs b/snudownrustxcheck.rs
new file mode 100644
index 0000000..8f63a5d
--- /dev/null
+++ b/snudownrustxcheck.rs
@@ -0,0 +1,6 @@
+extern crate cross_check_derive;
+extern crate cross_check_runtime;
+extern crate autolink;
+extern crate buffer;
+extern crate markdown;
+extern crate stack;
diff --git a/src/buffer.c b/src/buffer.c
index ab18948..cd48d35 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -24,12 +24,7 @@
 #include <string.h>
 #include <assert.h>
 
-/* MSVC compat */
-#if defined(_MSC_VER)
-#	define _buf_vsnprintf _vsnprintf
-#else
-#	define _buf_vsnprintf vsnprintf
-#endif
+
 
 int
 bufprefix(const struct buf *buf, const char *prefix)
@@ -109,45 +104,6 @@ bufcstr(struct buf *buf)
 	return NULL;
 }
 
-/* bufprintf: formatted printing to a buffer */
-void
-bufprintf(struct buf *buf, const char *fmt, ...)
-{
-	va_list ap;
-	int n;
-
-	assert(buf && buf->unit);
-
-	if (buf->size >= buf->asize && bufgrow(buf, buf->size + 1) < 0)
-		return;
-	va_start(ap, fmt);
-	n = _buf_vsnprintf((char *)buf->data + buf->size, buf->asize - buf->size, fmt, ap);
-	va_end(ap);
-
-	if (n < 0) {
-#ifdef _MSC_VER
-		va_start(ap, fmt);
-		n = _vscprintf(fmt, ap);
-		va_end(ap);
-#else
-		return;
-#endif
-	}
-	if ((size_t)n >= buf->asize - buf->size) {
-		if (bufgrow(buf, buf->size + n + 1) < 0)
-			return;
-
-		va_start(ap, fmt);
-		n = _buf_vsnprintf((char *)buf->data + buf->size, buf->asize - buf->size, fmt, ap);
-		va_end(ap);
-	}
-
-	if (n < 0)
-		return;
-
-	buf->size += n;
-}
-
 /* bufput: appends raw data to a buffer */
 void
 bufput(struct buf *buf, const void *data, size_t len)
diff --git a/src/buffer.h b/src/buffer.h
index ab98ab6..343b0f7 100644
--- a/src/buffer.h
+++ b/src/buffer.h
@@ -19,7 +19,6 @@
 #define BUFFER_H__
 
 #include <stddef.h>
-#include <stdarg.h>
 #include <stdint.h>
 
 #ifdef __cplusplus
diff --git a/src/bufprintf.c b/src/bufprintf.c
new file mode 100644
index 0000000..45c07b4
--- /dev/null
+++ b/src/bufprintf.c
@@ -0,0 +1,53 @@
+#include <stdarg.h>
+#include <stdlib.h>
+#include <assert.h>
+#include <string.h>
+#include <stdio.h>
+#include "buffer.h"
+
+/* MSVC compat */
+#if defined(_MSC_VER)
+#	define _buf_vsnprintf _vsnprintf
+#else
+#	define _buf_vsnprintf vsnprintf
+#endif
+
+
+/* bufprintf: formatted printing to a buffer */
+void
+bufprintf(struct buf *buf, const char *fmt, ...)
+{
+	va_list ap;
+	int n;
+
+	assert(buf && buf->unit);
+
+	if (buf->size >= buf->asize && bufgrow(buf, buf->size + 1) < 0)
+		return;
+	va_start(ap, fmt);
+	n = _buf_vsnprintf((char *)buf->data + buf->size, buf->asize - buf->size, fmt, ap);
+	va_end(ap);
+
+	if (n < 0) {
+#ifdef _MSC_VER
+		va_start(ap, fmt);
+		n = _vscprintf(fmt, ap);
+		va_end(ap);
+#else
+		return;
+#endif
+	}
+	if ((size_t)n >= buf->asize - buf->size) {
+		if (bufgrow(buf, buf->size + n + 1) < 0)
+			return;
+
+		va_start(ap, fmt);
+		n = _buf_vsnprintf((char *)buf->data + buf->size, buf->asize - buf->size, fmt, ap);
+		va_end(ap);
+	}
+
+	if (n < 0)
+		return;
+
+	buf->size += n;
+}
diff --git a/xchecks.c b/xchecks.c
new file mode 100644
index 0000000..6607010
--- /dev/null
+++ b/xchecks.c
@@ -0,0 +1,8 @@
+unsigned long long xcheck_hash_PyMemberDef(void *x) {
+    // TODO
+    return 0x123456789ABCDEFULL;
+}
+
+unsigned long long xcheck_hash_struct_buf(void *p) {
+    return 0xABCDEF12345678ULL;
+}
